# If not running interactively, don't do anything
[ -z "$PS1" ] && return

#osx color terminal
export CLICOLOR=1
# don't put duplicate lines in the history. See bash(1) for more options
# don't overwrite GNU Midnight Commander's setting of `ignorespace'.
HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend
# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

#PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}
PS1="\[\033[01;34m\]\w\[\033[00m\] \$(parse_git_branch)\n${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]\$ "

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac


# Set up TERM variables.
# vt100 and xterm have no color in vim (at least on unixs), but if we call them xterm-color, they will.
# (vt100 for F-Secure SSH.)
# This may well be the case for some other terms, so I'm putting them here.
# Also set up a variable to indicate whether to set up the title functions.
# TODO gnome-terminal, or however it reports itself
case $TERM in

  screen)
    TERM_IS_COLOR=true
    TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=false
    TERM_NOT_RECOGNIZED_BY_SUN_UTILS=false
    TERM_CAN_TITLE=true
  ;;

  xterm-color|color_xterm|rxvt|Eterm|screen*) # screen.linux|screen-w
    TERM_IS_COLOR=true
    TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=false
    TERM_NOT_RECOGNIZED_BY_SUN_UTILS=true
    TERM_CAN_TITLE=true
  ;;

  linux)
    TERM_IS_COLOR=true
    TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=false
    TERM_NOT_RECOGNIZED_BY_SUN_UTILS=true
    TERM_CAN_TITLE=false
  ;;

  xterm|vt100)
    TERM_IS_COLOR=true
    TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=true
    TERM_NOT_RECOGNIZED_BY_SUN_UTILS=false
    TERM_CAN_TITLE=true
  ;;

  *xterm*|eterm|rxvt*)
    TERM_IS_COLOR=true
    TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=true
    TERM_NOT_RECOGNIZED_BY_SUN_UTILS=true
    TERM_CAN_TITLE=true
  ;;

  *)
    TERM_IS_COLOR=false
    TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=false
    TERM_NOT_RECOGNIZED_BY_SUN_UTILS=false
    TERM_CAN_TITLE=false
  ;;

esac

# dircolors... make sure that we have a color terminal, dircolors exists, and ls supports it.
if $TERM_IS_COLOR && ( dircolors --help && ls --color ) &> /dev/null; then
  # For some reason, the unixs machines need me to use $HOME instead of ~
  # List files from highest priority to lowest.  As soon as the loop finds one that works, it will exit.
  for POSSIBLE_DIR_COLORS in "$HOME/.dir_colors" "/etc/DIR_COLORS"; do
    [[ -f "$POSSIBLE_DIR_COLORS" ]] && [[ -r "$POSSIBLE_DIR_COLORS" ]] && eval `dircolors -b "$POSSIBLE_DIR_COLORS"` && break
  done

  alias ls="ls --color=auto"
  alias ll="ls --color=auto -l"
  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'
else
  # No color, so put a slash at the end of directory names, etc. to differentiate.
  alias ls="ls -F"
  alias ll="ls -lF"
fi

# Alias definitions.
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi
# Set $TERM for libvte terminals that set $TERM wrong (like gnome-terminal)
{
  [ "_$TERM" = "_xterm" ] && type ldd && type grep && type tput && [ -L "/proc/$PPID/exe" ] && {
    if ldd /proc/$PPID/exe | grep libvte; then
      if [ "`tput -Txterm-256color colors`" = "256" ]; then
        TERM=xterm-256color
      elif [ "`tput -Txterm-256color colors`" = "256" ]; then
        TERM=xterm-256color
      elif tput -T xterm; then
        TERM=xterm
      fi
    fi
  }
} >/dev/null 2>/dev/null

venwrap=`type -P virtualenvwrapper_bashrc`
if [ "$venwrap" != "" ]; then
    source $venwrap
fi

# osx vim
if [ -x "/Applications/MacVim.app/Contents/MacOS/Vim" ]; then
    PATH=/Applications/MacVim.app/Contents/MacOS/:$PATH
fi

export PATH



PYTHONSTARTUP=~/.pythonrc.py
export PYTHONSTARTUP

parse_svn_branch() {
  parse_svn_url | sed -e 's#^'"$(parse_svn_repository_root)"'##g' | awk -F / '{print "(svn::"$1 "/" $2 ")"}'
}
parse_svn_url() {
  svn info 2>/dev/null | sed -ne 's#^URL: ##p'
}
parse_svn_repository_root() {
  svn info 2>/dev/null | sed -ne 's#^Repository Root: ##p'
}

# Add git and svn branch names
#export PS1="$PS1\$(parse_git_branch)\$(parse_svn_branch) "

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

venwrap=`type -P virtualenvwrapper_bashrc`
if [ "$venwrap" != "" ]; then
    source $venwrap
fi
PATH=$PATH:/var/lib/gems/1.9.1/gems/haml-3.0.4/bin
PATH=$PATH:/usr/local/sbin/
PATH=$PATH:/usr/local/bin
PATH=$PATH:/usr/local/Cellar/python2.6/2.6.6/bin
PATH=$PATH:~/.virtualenvs/prw
PATH=$PATH:~/.gem/ruby/1.8/bin
PATH=$PATH:$HOME/local/node/bin
export PATH
export MAXOSX_DEPLOYMENT_TARGET=10.6
export WORKON_HOME=$HOME/.virtualenvs
#source /usr/local/Cellar/python2.6/2.6.6/bin/virtualenvwrapper.sh
alias vi="bash -lc mvim"
alias test="nosetests"


function qt() {
	TESTS="$@"
	if [[ -z $TESTS ]]; then
	    TESTS=`find apps -maxdepth 1 -type d -not -name apps | sed -e "s/^apps\///"`
	fi
	./manage.py test --settings=test_settings $TESTS
}

function pgrep() {
	ps aux | grep $1 | grep -v grep
}

function pkill() {
	local pid
	pid=$(ps ax | grep $1 | grep -v grep | awk '{ print $1 }')
	kill -9 $pid
	echo -n 'Killed ' $1 '(process ' $pid ')'
}

function dock-on() {
    defaults write com.apple.dashboard mcx-disabled -bool NO
    killall Dock
}
function dock-off() {
    defaults write com.apple.dashboard mcx-disabled -bool YES
    killall Dock
}

function silent() {
    ($@ 2>&1 > /dev/null) 2>&1 > /dev/null
}

function shelter() {
    mkvirtualenv --no-site-packages $@
}

function simplekill() {
    silent kill -9 `ps aux | egrep -i $1 | egrep -v "(grep)" | awk '{ print $2 }'`
}

unalias branches 2> /dev/null
unalias pull 2> /dev/null
unalias add 2> /dev/null
unalias merge 2> /dev/null
unalias gdiff 2> /dev/null
unalias st 2> /dev/null
unalias clearpyc 2> /dev/null
unalias rmo 2> /dev/null
alias st='git status'
alias branches='git branch -a | sed -Ee "s:^\*? *::" | sed -Ee "s:^(remotes/)?origin/::g" | grep -v "HEAD -> origin/master" | sort | uniq'
alias pull='git pull'
alias add='git add'
alias merge='git merge'
alias gdiff='git diff'
alias clearpyc='find . -name "*.pyc" -exec rm "{}" ";"'
alias rmo="find . -name *.orig -exec rm '{}' ';'"
alias commit='git commit -m'
alias mongo-system-live='ssh -i ~/.ec2/nuvi.pem ec2-user@mongo-system-live.nuviapp.com'
alias mongo-stats-live='ssh -i ~/.ec2/nuvi.pem ec2-user@mongo-stats-live.nuviapp.com'
alias mongo-profile-live='ssh -i ~/.ec2/nuvi.pem ec2-user@mongo-profile-live.nuviapp.com'
alias mongo-social-live='ssh -i ~/.ec2/nuvi.pem ec2-user@mongo-social-live.nuviapp.com'
alias redis-live='ssh -i ~/.ec2/nuvi.pem root@redis-live.nuviapp.com'
alias redis-dev='ssh -i ~/.ec2/nuvi.pem root@redis-dev.nuviapp.com'
alias mongo-dev='ssh -i ~/.ec2/nuvi.pem ec2-user@mongo-dev.nuviapp.com'
alias hadoop-dev='ssh -i ~/.ec2/hadoop.pem ubuntu@hadoop1-dev.nuviapp.com'

source ~/.git-helpers
alias vim="/usr/local/Cellar/macvim/7.3-57/MacVim.app/Contents/MacOS/Vim"

if [ -f /usr/local/etc/bash_completion.d/git-completion.bash ]; then
. /usr/local/etc/bash_completion.d/git-completion.bash
fi
