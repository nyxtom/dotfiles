# If not running interactively, don't do anything
#[ -z "$PS1" ] && return

# hide deprecated bash
export BASH_SILENCE_DEPRECATION_WARNING=1

# osx terminal colors
export CLICOLOR=1
export GLAMOUR_STYLE=light

# don't put duplicate lines in the history. See bash(1) for more options
# don't overwrite GNU Midnight Commander's setting of `ignorespace'.
HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend
# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

## gpg
GPG_TTY=$(tty)
export GPG_TTY

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

includepath() {
    echo "" | gcc -E -Wp,-v -
}

initcpp() {
    mkdir src
    cat > compile_flags.txt <<EOF
-std=c++17
EOF
    cat > CMakeLists.txt <<EOF
# only for cmake --version >= 3.5.1
cmake_minimum_required(VERSION 3.5.1)

# project name
get_filename_component(ProjectId \${CMAKE_CURRENT_SOURCE_DIR} NAME)
string(REPLACE " " "_" ProjectId \${ProjectId})
project(\${ProjectId})

# creates the variable exec and sets it to hello
set(EXEC a.out)

# set the C++17 standard
set(CMAKE_CXX_STANDARD 17)

# I../includes
include_directories(includes)

# puts all .cpp files inside src to the sources variable
file(GLOB SOURCES src/*.cpp)

# compiles the files defined by sources to generate the executable
add_executable(\${EXEC} \${SOURCES})
EOF

    cat > src/main.cpp <<EOF
#include <iostream>

int main() {
    std::cout << "Hello World" << std::endl;
    return 0;
}
EOF

    cat > .gitignore <<EOF
CMakeFiles
*.cmake
CMakeCache.txt
Makefile
EOF
}

# Adds the current branch to the bash prompt when the working directory is
# part of a Git repository. Includes color-coding and indicators to quickly
# indicate the status of working directory.
#
# To use: Copy into ~/.bashrc and tweak if desired.
#
# Based upon the following gists:
# <https://gist.github.com/henrik/31631>
# <https://gist.github.com/srguiwiz/de87bf6355717f0eede5>
# Modified by me, using ideas from comments on those gists.
#
# License: MIT, unless the authors of those two gists object :)

git_branch() {
    # -- Finds and outputs the current branch name by parsing the list of
    #    all branches
    # -- Current branch is identified by an asterisk at the beginning
    # -- If not in a Git repository, error message goes to /dev/null and
    #    no output is produced
    git branch --no-color 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

git_status() {
    # Outputs a series of indicators based on the status of the
    # working directory:
    # + changes are staged and ready to commit
    # ! unstaged changes are present
    # ? untracked files are present
    # S changes have been stashed
    # P local commits need to be pushed to the remote
    local status="$(git status --porcelain 2>/dev/null)"
    local output=''
    local branch=$(git_branch)
    [[ -n $(egrep '^[MADRC]' <<<"$status") ]] && output="$output+"
    [[ -n $(egrep '^.[MD]' <<<"$status") ]] && output="$output!"
    [[ -n $(egrep '^\?\?' <<<"$status") ]] && output="$output!"
    [[ -n $(git stash list) ]] && output="${output}#"
    [[ -n $(git log $branch --not --remotes) ]] && output="${output}^"
    [[ -n $output ]] && output="$output"  # separate from branch name
    echo $output
}

git_color() {
    # Receives output of git_status as argument; produces appropriate color
    # code based on status of working directory:
    # - White if everything is clean
    # - Green if all changes are staged
    # - Red if there are uncommitted changes with nothing staged
    # - Yellow if there are both staged and unstaged changes
    local staged=$([[ $1 =~ \+ ]] && echo yes)
    local dirty=$([[ $1 =~ [!\?] ]] && echo yes)
    local unpushed=$([[ $1 =~ \^ ]] && echo yes)
    if [[ -n $staged ]] && [[ -n $dirty ]]; then
        echo -e '\033[1;33m'  # bold yellow
    elif [[ -n $staged ]]; then
        echo -e '\033[1;32m'  # bold green
    elif [[ -n $dirty ]]; then
        echo -e '\033[1;31m'  # bold red
    elif [[ -n $unpushed ]]; then
        echo -e '\033[1;96m'
    else
        echo -e '\033[1;37m'  # bold white
    fi
}

git_prompt() {
    # First, get the branch name...
    local branch=$(git_branch)
    # Empty output? Then we're not in a Git repository, so bypass the rest
    # of the function, producing no output
    if [[ -n $branch ]]; then
        local state=$(git_status $branch)
        local color=$(git_color $state)
        # Now output the actual code to insert the branch and status
        echo -e "\x01$color\x02($branch)$state\x01\033[00m\x02"  # last bit resets color
    fi
}

PS1="\[\033[01;34m\]\w\[\033[00m\] \$(git_prompt)\n${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]\$ "

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac


# Set up TERM variables.
# vt100 and xterm have no color in vim (at least on unixs), but if we call them xterm-color, they will.
# (vt100 for F-Secure SSH.)
# This may well be the case for some other terms, so I'm putting them here.
# Also set up a variable to indicate whether to set up the title functions.
# TODO gnome-terminal, or however it reports itself
case $TERM in

  screen)
    TERM_IS_COLOR=true
    TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=false
    TERM_NOT_RECOGNIZED_BY_SUN_UTILS=false
    TERM_CAN_TITLE=true
  ;;

  xterm-color|color_xterm|rxvt|Eterm|screen*) # screen.linux|screen-w
    TERM_IS_COLOR=true
    TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=false
    TERM_NOT_RECOGNIZED_BY_SUN_UTILS=true
    TERM_CAN_TITLE=true
  ;;

  linux)
    TERM_IS_COLOR=true
    TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=false
    TERM_NOT_RECOGNIZED_BY_SUN_UTILS=true
    TERM_CAN_TITLE=false
  ;;

  xterm|vt100)
    TERM_IS_COLOR=true
    TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=true
    TERM_NOT_RECOGNIZED_BY_SUN_UTILS=false
    TERM_CAN_TITLE=true
  ;;

  *xterm*|eterm|rxvt*)
    TERM_IS_COLOR=true
    TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=true
    TERM_NOT_RECOGNIZED_BY_SUN_UTILS=true
    TERM_CAN_TITLE=true
  ;;

  *)
    TERM_IS_COLOR=false
    TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=false
    TERM_NOT_RECOGNIZED_BY_SUN_UTILS=false
    TERM_CAN_TITLE=false
  ;;

esac

# dircolors... make sure that we have a color terminal, dircolors exists, and ls supports it.
if $TERM_IS_COLOR && ( dircolors --help && ls --color ) &> /dev/null; then
  # For some reason, the unixs machines need me to use $HOME instead of ~
  # List files from highest priority to lowest.  As soon as the loop finds one that works, it will exit.
  for POSSIBLE_DIR_COLORS in "$HOME/.dir_colors" "/etc/DIR_COLORS"; do
    [[ -f "$POSSIBLE_DIR_COLORS" ]] && [[ -r "$POSSIBLE_DIR_COLORS" ]] && eval `dircolors -b "$POSSIBLE_DIR_COLORS"` && break
  done
  alias ls="ls --color=auto"
  alias ll="ls --color=auto -l"
  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'
else
  # No color, so put a slash at the end of directory names, etc. to differentiate.
  alias ls="ls -F"
  alias ll="ls -lF"
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

export GOPATH=~/go
export RUSTPATH=~/.cargo
PATH=$PATH:/usr/local/sbin/
PATH=$PATH:/usr/local/bin
PATH=$PATH:/usr/local/cuda/bin
PATH=$PATH:$HOME/local/node/bin
PATH=$PATH:$GOPATH/bin
PATH=$PATH:~/bin
PATH=$PATH:$RUSTPATH/bin
PATH=$PATH:/Users/nyxtom/Library/Python/3.8/bin
PATH=$PATH:/Users/nyxtom/.npm-global/bin
PATH=$PATH:/usr/local/opt/krb5/bin:/usr/local/opt/krb5/sbin
PATH=/usr/local/opt/krb5/bin:$PATH
PATH=/usr/local/opt/krb5/sbin:$PATH
PATH=/usr/local/opt/ruby/bin:$PATH
BUN_INSTALL=/Users/nyxtom/.bun
PATH=/Users/nyxtom/.bun/bin:$PATH
LDFLAGS="-L/usr/local/opt/krb5/lib"
CPPFLAGS="-I/usr/local/opt/krb5/include"
export LDFLAGS
export CPPFLAGS
export PATH

complete -C '/usr/local/bin/aws_completer' aws

# cargo cache
export CARGO_TARGET_DIR="$HOME/.cache/cargo"

# aliasing for git
unalias branches 2> /dev/null
unalias st 2> /dev/null
unalias co 2> /dev/null
unalias add 2> /dev/null
unalias gp 2> /dev/null
alias branches='git branch -a --no-merged | sed -Ee "s:^\*? *::" | sed -Ee "s:^(remotes/)?origin/::g" | grep -v "HEAD -> origin/master" | sort | uniq'
alias st='git status'
alias co='git commit'
alias add='git add'
alias gp='git pull'
alias checkout='git checkout'
eval "$(gh completion -s bash)"

if [ -f /usr/local/etc/bash_completion.d/git-completion.bash ]; then
. /usr/local/etc/bash_completion.d/git-completion.bash
fi

[ -z "$PS1" ] && return

# --files: List files that would be searched but do not search
# --no-ignore: Do not respect .gitignore, etc...
# --hidden: Search hidden files and folders
# --follow: Follow symlinks
# --glob: Additional conditions for search (in this case ignore everything in the .git/ folder)

export FZF_DEFAULT_COMMAND='rg --files --glob "!.git/*"'
[ -f ~/.fzf.bash ] && source ~/.fzf.bash

__fzf_find()
{
__ehc $(fzf --tac --tiebreak=index | perl -ne 'm/^\s*([0-9]+)/ and print "!$1"')
}

__ehc()
{
if
        [[ -n $1 ]]
then
        bind '"\er": redraw-current-line'
        bind '"\e^": magic-space'
        READLINE_LINE=${READLINE_LINE:+${READLINE_LINE:0:READLINE_POINT}}${1}${READLINE_LINE:+${READLINE_LINE:READLINE_POINT}}
        READLINE_POINT=$(( READLINE_POINT + ${#1} ))
else
        bind '"\er":'
        bind '"\e^":'
fi
}

builtin bind -x '"\C-x2": __fzf_find';
builtin bind '"\C-p": "\C-x2\e^\er"'

# disable apple press/hold for alernative characters, speed up keyrepeat
defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false

# start tmux if available
# if command -v tmux &> /dev/null && [ -n "$PS1" ] && [[ ! "$TERM" =~ screen ]] && [[ ! "$TERM" =~ tmux ]] && [ -z "$TMUX" ]; then
#   tmux attach || exec tmux
# fi

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/nyxtom/google-cloud-sdk/path.bash.inc' ]; then . '/Users/nyxtom/google-cloud-sdk/path.bash.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/nyxtom/google-cloud-sdk/completion.bash.inc' ]; then . '/Users/nyxtom/google-cloud-sdk/completion.bash.inc'; fi
. "$HOME/.cargo/env"
